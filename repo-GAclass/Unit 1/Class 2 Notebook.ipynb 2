{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "first_name = 'harley'\n",
    "last_name = 'Hoffmann'\n",
    "age = 31"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_name == 'Harley'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bool"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(first_name != 'Harley')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "bool"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(first_name != 'Harley')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your name is: HARLEY\n",
      "Your last name is HOFFMANN\n"
     ]
    }
   ],
   "source": [
    "if first_name == 'Harley' or 'harley':\n",
    "    # if true -- do this bidness\n",
    "    print(f\"Your name is: {first_name.upper()}\")\n",
    "    if last_name == 'Hoffmann':\n",
    "        print(f\"Your last name is {last_name.upper()}\")\n",
    "    else:\n",
    "        print(\"Your last name is something else\")  \n",
    "elif first_name == 'joe':\n",
    "    print (f\"Your name is: {first_name.upper()}\")\n",
    "else:\n",
    "    print(\"Nothing was True\")\n",
    "    print(\"Still in the else statement\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Does it print?\n"
     ]
    }
   ],
   "source": [
    "if 'Johnny':\n",
    "    print(\"Does it print?\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yourname is: HARLEY\n"
     ]
    }
   ],
   "source": [
    "if ['Harley','is','my','name']:\n",
    "    print(f\"Yourname is: {first_name.upper()}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "our_list = [\"this\", \"is\", \"our\", \"list\", 7, 9, 10, True, False, [1,2,6]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['this', 'is', 'our', 'list', 7, 9, 10, True, False, [1, 2, 6]]\n"
     ]
    }
   ],
   "source": [
    "print(our_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "our_list[5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'our'"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "our_list[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "add some numbers\n",
      "add some numbers\n",
      "add some numbers\n",
      "add some numbers\n",
      "add some numbers\n",
      "add some numbers\n",
      "add some numbers\n",
      "add some numbers\n",
      "looks good\n"
     ]
    }
   ],
   "source": [
    "var = 'password1'\n",
    "for x in var:\n",
    "    if x.isalpha():\n",
    "        print(\"add some numbers\")\n",
    "    else:\n",
    "        print(\"looks good\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 6]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "our_list[-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "our_list[-1][-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['this', 'is', 'our', 'list', 7, 9]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "our_list[:6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[True, False, [1, 2, 6]]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "our_list[-3:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/harleyhoffmann/dat-02-22/ClassMaterial/Unit1/Class2/Labs'"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Class 2 Notebook.ipynb',\n",
       " 'Loops - Basic.ipynb',\n",
       " 'Untitled.ipynb',\n",
       " 'Loops - Basic - Solutions.ipynb',\n",
       " 'Loops - Intermediate - Solutions.ipynb',\n",
       " 'If-Elif-Else-Intermediate.ipynb',\n",
       " 'If-Elif-Else-Intermediate-Solutions.ipynb',\n",
       " 'If-Elif-Else-Basic.ipynb',\n",
       " '.ipynb_checkpoints',\n",
       " 'Loops - Intermediate.ipynb']"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/harleyhoffmann/dat-02-22/ClassMaterial/Unit1/Class2\n"
     ]
    }
   ],
   "source": [
    "cd .."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/harleyhoffmann/dat-02-22/ClassMaterial/Unit1\n"
     ]
    }
   ],
   "source": [
    "cd .."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/harleyhoffmann/dat-02-22/ClassMaterial\n"
     ]
    }
   ],
   "source": [
    "cd .."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/harleyhoffmann/dat-02-22\n"
     ]
    }
   ],
   "source": [
    "cd .."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/harleyhoffmann\n"
     ]
    }
   ],
   "source": [
    "cd .."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/harleyhoffmann'"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Music',\n",
       " '.condarc',\n",
       " '.DS_Store',\n",
       " '.CFUserTextEncoding',\n",
       " 'ajhhoffmann-distribution-form-final.pdf',\n",
       " 'Pictures',\n",
       " '.atom',\n",
       " 'repo-GAclass',\n",
       " '.ipython',\n",
       " 'Desktop',\n",
       " 'Library',\n",
       " 'GA-Blog',\n",
       " '.cups',\n",
       " '.bash_sessions',\n",
       " 'Public',\n",
       " 'github',\n",
       " '.anaconda',\n",
       " 'Movies',\n",
       " 'Applications',\n",
       " 'opt',\n",
       " '.Trash',\n",
       " '.zoomus',\n",
       " '.jupyter',\n",
       " 'Documents',\n",
       " '.git',\n",
       " '.bash_profile',\n",
       " 'Downloads',\n",
       " '.continuum',\n",
       " '.gitconfig',\n",
       " 'dat-02-22',\n",
       " '.bash_history',\n",
       " '.conda']"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/harleyhoffmann/Downloads\n"
     ]
    }
   ],
   "source": [
    "cd Downloads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Candidate Hired last 30 days.csv\n",
      "report1612196890703.csv\n",
      "Q12021-Actuals.csv\n",
      "c_supply-triage-Manchester-021020.csv\n",
      "Candidate not yet placed but active.csv\n",
      "Candidates-UTM-Source.csv\n",
      "c_supply-triage-London-011921.csv\n",
      "to Intros Amongst 3 Goal by Market - QTD 2021-01-25T1314.csv\n",
      "DevOps Senior Toronto chicago.csv\n",
      "c_coding-challenge-newsUK-Go-and-More-032421.csv\n",
      "to Intros Amongst 3 Goal by Market - QTD 2021-01-19T1035.csv\n",
      "c_supply-triage-female-021720.csv\n",
      "2020 Non-Core Actuals.csv\n",
      "c_supply-triage-devops-021820.csv\n",
      "c_supply-triage-mobile-USA-020820.csv\n",
      "c_Hired-past-30-days.csv\n",
      "Q1-FY2021-Projectiosn.csv\n",
      "Client new contract 30-60 days.csv\n",
      "c_5-ivrs-current-batch.csv\n",
      "c_supply-triage-020121.csv\n",
      "report1613490479392.csv\n",
      "report1614029206275.csv\n",
      "c_supply-hbcu-021621.csv\n",
      "deliveries.csv\n",
      "report1612819255957.csv\n",
      "Client survey upon placing a candidate - last 60 days.csv\n",
      "to VH Goal by Market - QTD 2021-01-19T1035.csv\n",
      "c_supply-triage-Embedded-020821.csv\n",
      "to VH Goal by Market - QTD 2021-01-25T1314.csv\n",
      "c_supply-newsuk-Golang-022220.csv\n",
      "c_london-js-7years-012721.csv\n"
     ]
    }
   ],
   "source": [
    "for file in os.listdir():\n",
    "    if file[-3:] == 'csv':\n",
    "        print(file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "users = [\n",
    "    ('John', 34, None), ('Abby', 21, 'NY'), ('Jill', 41, 'OH'), ('Jason', 59, 'AL'), ('William', 35, None),\n",
    "    ('Wynona', 62, 'WY'), ('Barbara', 42, None), ('Harold', 52, None), ('Jose', 41, 'NH'), ('Ariel', 48, 'OR')\n",
    "]\n",
    "new_list = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "for x in users:\n",
    "    if users[any(x)][any(x)] != None:\n",
    "        new_list.append(x)\n",
    "    else:\n",
    "        Print(\"You're wrong\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('John', 34, None), ('Abby', 21, 'NY'), ('Jill', 41, 'OH'), ('Jason', 59, 'AL'), ('William', 35, None), ('Wynona', 62, 'WY'), ('Barbara', 42, None), ('Harold', 52, None), ('Jose', 41, 'NH'), ('Ariel', 48, 'OR'), ('John', 34, None), ('Abby', 21, 'NY'), ('Jill', 41, 'OH'), ('Jason', 59, 'AL'), ('William', 35, None), ('Wynona', 62, 'WY'), ('Barbara', 42, None), ('Harold', 52, None), ('Jose', 41, 'NH'), ('Ariel', 48, 'OR'), ('John', 34, None), ('Abby', 21, 'NY'), ('Jill', 41, 'OH'), ('Jason', 59, 'AL'), ('William', 35, None), ('Wynona', 62, 'WY'), ('Barbara', 42, None), ('Harold', 52, None), ('Jose', 41, 'NH'), ('Ariel', 48, 'OR')]\n"
     ]
    }
   ],
   "source": [
    "print(new_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "users = [\n",
    "    ('John', 34, None), ('Abby', 21, 'NY'), ('Jill', 41, 'OH'), ('Jason', 59, 'AL'), ('William', 35, None),\n",
    "    ('Wynona', 62, 'WY'), ('Barbara', 42, None), ('Harold', 52, None), ('Jose', 41, 'NH'), ('Ariel', 48, 'OR')\n",
    "]\n",
    "new_list = []\n",
    "invalid_users = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [],
   "source": [
    "for X in users:\n",
    "    for Y in X:\n",
    "        if Y == None:\n",
    "            invalid_users.append(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('John', 34, None), ('William', 35, None), ('Barbara', 42, None), ('Harold', 52, None)]\n"
     ]
    }
   ],
   "source": [
    "print(invalid_users)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_password = 'password123'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Invalid Password\n"
     ]
    }
   ],
   "source": [
    " for y in new_password:\n",
    "        if len(new_password) > 10 and new_password.isalnum() == False and new_password.isdigit() == False and new_password.isalpha() == False:\n",
    "            print(\"Valid Password\")\n",
    "        else:\n",
    "            print(\"Invalid Password\")\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_a = [1, 2, 'johnny', 'cat']\n",
    "list_b = [4, 5, 'milk']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 4)\n",
      "(2, 5)\n",
      "('johnny', 'milk')\n"
     ]
    }
   ],
   "source": [
    "for item in zip(list_a, list_b):\n",
    "    print(item)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
